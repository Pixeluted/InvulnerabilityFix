package me.pixeluted.invulnerabilityfix.events;

import me.pixeluted.invulnerabilityfix.InvulnerabilityFix;
import net.minecraft.client.Minecraft;
import net.minecraft.network.chat.Component;
import net.minecraft.world.damagesource.DamageSource;
import net.minecraft.world.entity.player.Player;
import net.minecraftforge.client.event.InputEvent;
import net.minecraftforge.event.TickEvent;
import net.minecraftforge.event.entity.living.LivingAttackEvent;
import net.minecraftforge.event.entity.player.PlayerEvent;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.fml.common.Mod;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

@Mod.EventBusSubscriber(modid = InvulnerabilityFix.MODID)
public class ModEvents {
    private static final Map<Player, Integer[]> previousPositions = new HashMap<>();
    private static final Map<String, Player> invulnerablePlayers = new HashMap<>();
    private static final Map<String, Map<String, Boolean>> pressedKeys = new HashMap<>();

    @SubscribeEvent
    public static void playerJoined(PlayerEvent.PlayerLoggedInEvent event) {
        Player player = event.getEntity();

        //player.sendSystemMessage(Component.literal("Welcome!"));
        invulnerablePlayers.put(player.getName().getString(), player);
    }

    @SubscribeEvent
    public static void onPlayerTick(TickEvent.PlayerTickEvent event) {
        if (event.phase == TickEvent.Phase.END && event.player != null) {
            Player player = event.player;
            if (invulnerablePlayers.containsKey(player.getName().getString())) {
                Integer[] previousPosition = previousPositions.get(player);
                Integer[] currentPosition = new Integer[3];
                getPlayerPosition(player, currentPosition);

                if (!Arrays.equals(previousPosition, currentPosition) && isMovingOnHisOwn(player)) {
                    invulnerablePlayers.remove(player.getName().getString());
                }

                previousPositions.put(player, Arrays.copyOf(currentPosition, currentPosition.length));
            }
        }
    }

    @SubscribeEvent
    public static void onLivingAttack(LivingAttackEvent event) {
        if (event.getEntity() instanceof Player) {
            Player player = (Player) event.getEntity();
            if (invulnerablePlayers.containsKey(player.getName().getString())) {
                event.setCanceled(true);
            }
        }
    }

    @SubscribeEvent
    public static void onKeyInputEvent(InputEvent.Key event) {
        if (invulnerablePlayers.containsKey(Minecraft.getInstance().getUser().getName())) {
            if (!pressedKeys.containsKey(Minecraft.getInstance().getUser().getName())) {
                HashMap newHashMap = new HashMap<>();
                newHashMap.put("left", false);
                newHashMap.put("right", false);
                newHashMap.put("forward", false);
                newHashMap.put("backward", false);

                pressedKeys.put(Minecraft.getInstance().getUser().getName(), newHashMap);
            }

            Map<String, Boolean> pressedKeysClient = pressedKeys.get(Minecraft.getInstance().getUser().getName());

            pressedKeysClient.put("left", Minecraft.getInstance().options.keyLeft.isDown());
            pressedKeysClient.put("right", Minecraft.getInstance().options.keyRight.isDown());
            pressedKeysClient.put("forward", Minecraft.getInstance().options.keyUp.isDown());
            pressedKeysClient.put("backward", Minecraft.getInstance().options.keyDown.isDown());
        }
    }

    @SubscribeEvent
    public static void loggedOutEvent(PlayerEvent.PlayerLoggedOutEvent event) {
        if (pressedKeys.containsKey(event.getEntity().getName().getString())) {
            pressedKeys.remove(event.getEntity().getName().getString());
        }
    }
    public static boolean isMovingOnHisOwn(Player player) {
        if (!pressedKeys.containsKey(Minecraft.getInstance().getUser().getName())) {
            HashMap newHashMap = new HashMap<>();
            newHashMap.put("left", false);
            newHashMap.put("right", false);
            newHashMap.put("forward", false);
            newHashMap.put("backward", false);

            pressedKeys.put(Minecraft.getInstance().getUser().getName(), newHashMap);
        }

        Map<String, Boolean> pressedKeysClient = pressedKeys.get(Minecraft.getInstance().getUser().getName());

        if (pressedKeysClient.get("left") || pressedKeysClient.get("right") || pressedKeysClient.get("forward") || pressedKeysClient.get("backward")) {
            return true;
        } else {
            return false;
        }
    }
    private static void getPlayerPosition(Player player, Integer[] positionArray) {
        positionArray[0] = (int) Math.round(player.position().x);
        positionArray[1] = (int) Math.round(player.position().y);
        positionArray[2] = (int) Math.round(player.position().z);
    }
}
