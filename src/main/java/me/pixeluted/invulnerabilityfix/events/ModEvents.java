package me.pixeluted.invulnerabilityfix.events;

import me.pixeluted.invulnerabilityfix.InvulnerabilityFix;
import net.minecraft.network.chat.Component;
import net.minecraft.world.entity.player.Player;
import net.minecraftforge.event.TickEvent;
import net.minecraftforge.event.entity.living.LivingAttackEvent;
import net.minecraftforge.event.entity.player.PlayerEvent;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.fml.common.Mod;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

@Mod.EventBusSubscriber(modid = InvulnerabilityFix.MODID)
public class ModEvents {
    private static final Map<Player, Integer[]> previousPositions = new HashMap<>();
    private static final Map<String, Player> invulnerablePlayers = new HashMap<>();
    private static final Integer[] reusablePositionArray = new Integer[3];

    public static Map<Player, Integer[]> getPreviousPositions() {
        return previousPositions;
    }

    public static Map<String, Player> getInvulnerablePlayers() {
        return invulnerablePlayers;
    }

    @SubscribeEvent
    public static void playerJoined(PlayerEvent.PlayerLoggedInEvent event) {
        Player player = event.getEntity();

        //player.sendSystemMessage(Component.literal("Welcome!"));
        try {
            TimeUnit.SECONDS.sleep(6);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
        getInvulnerablePlayers().put(player.getName().getString(), player);
    }

    @SubscribeEvent
    public static void onPlayerTick(TickEvent.PlayerTickEvent event) {
        if (event.phase == TickEvent.Phase.END && event.player != null) {
            Player player = event.player;
            Integer[] previousPosition = previousPositions.get(player);
            getPlayerPosition(player, reusablePositionArray);
            if (!Arrays.equals(previousPosition, reusablePositionArray)) {
                if (invulnerablePlayers.containsKey(player.getName().getString())) {
                    invulnerablePlayers.remove(player.getName().getString());
                    //player.sendSystemMessage(Component.literal("You moved, protection disabled!"));
                }
            }
            previousPositions.put(player, Arrays.copyOf(reusablePositionArray, reusablePositionArray.length));
        }
    }

    @SubscribeEvent
    public static void onLivingAttack(LivingAttackEvent event) {
        if (event.getEntity() instanceof Player) {
            Player player = (Player) event.getEntity();
            if (invulnerablePlayers.containsKey(player.getName().getString())) {
                event.setCanceled(true);
            }
        }
    }

    private static void getPlayerPosition(Player player, Integer[] positionArray) {
        positionArray[0] = (int) Math.round(player.position().x);
        positionArray[1] = (int) Math.round(player.position().y);
        positionArray[2] = (int) Math.round(player.position().z);
    }
}
